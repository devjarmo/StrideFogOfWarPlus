
Next Steps:
===========

Distance checking through a FogOfWarSystem registration service.

	Pros with current system:
		- Doesn't do checking unless within distance of the camera.
		- Shortcuts out once fully visible.

	Cons with current system:
		- Checks distance from the object to all detectors. (Poor scale)
		- Does not currently do line of sight checking.
		- LoS Could be added, but wouldn't detect the edges.
		- Doesn't scale will RTS numbers.

Next Steps After Getting Working:
=================================

****	Augmentation/ Hybrid approach:
		- Don't register the Line Of Sight as a detector.
		- Use a "tagging" scheme which refreshes a "timer" in the subscriber.
			- Accessed through an internal method on Subscriber class.


0) Change the camera to moving as well as the character.


0) Measure/Optimize performance.
0) Design the new Dynamic Line Of Sight Detector prefab.
	- This can use the same texture as the detector.
0) Write a method for raycasting LEFT to RIGHT, dump to an array of float2(angle, distance).
0) Material will need to be in the render group 



=============================================

Any point (x,y) on the path of the circle is x = rsin(θ), y = rcos(θ).

thus: (x,y) = (12*sin(115), 12*cos(115))

So your point will roughly be (10.876, -5.071) (assuming the top right quadrant is x+, y+)


[IF THERE IS AN OFFSET (WORLD SPACE)]

x = cx + r * cos(a)
y = cy + r * sin(a)

Where r is the radius, cx,cy the origin, and a the angle.

That's pretty easy to adapt into any language with basic trig functions. Note that most languages will use radians for the angle in trig functions, so rather than cycling through 0..360 degrees, you're cycling through 0..2PI radians.
