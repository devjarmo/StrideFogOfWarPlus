
Current Effort:
===============

0) Set the Detector and Subscriber Scripts to 1.
0) Using Vector 3 Distance won’t work with camera elevation? Check this. This may need converted to Vector 2.
	- Convert this to Vector2.
0) Verify everything loads in correctly.
0) Comment out Alpha setting and just set it to 1.
0) Debug/Troubleshoot, need to get this version working before augmenting.


Next Steps:
===========

0) Add in "Hybrid" approach for dynamic line of sight detection.


0) Measure/Optimize performance.
0) Design the new Dynamic Line Of Sight Detector prefab.
	- This can use the same texture as the detector.
0) Write a method for raycasting LEFT to RIGHT, dump to an array of float2(angle, distance).
0) Material will need to be in the render group 



=============================================

Any point (x,y) on the path of the circle is x = rsin(θ), y = rcos(θ).

thus: (x,y) = (12*sin(115), 12*cos(115))

So your point will roughly be (10.876, -5.071) (assuming the top right quadrant is x+, y+)


[IF THERE IS AN OFFSET (WORLD SPACE)]

x = cx + r * cos(a)
y = cy + r * sin(a)

Where r is the radius, cx,cy the origin, and a the angle.

That's pretty easy to adapt into any language with basic trig functions. Note that most languages will use radians for the angle in trig functions, so rather than cycling through 0..360 degrees, you're cycling through 0..2PI radians.
