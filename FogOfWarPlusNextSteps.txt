
[WIP] 0) Move this all (Shader Logic) to the game side code and just update a single Alpha variable.
[WIP] 0) Write the unit alpha script-> attach to enemies through prefab.
	- This should be a startup script.
[WIP] 0) Copy over the registration component of the fog of war script.
[WIP] 0) Copy over the system portion of the fog of war script.
[WIP] 0) Perform a simple test with the camera.


0) *Will need to remap/update script references in Game Studio based on changes*.


0) Measure/Optimize performance.
0) Design the new Dynamic Line Of Sight Detector prefab.
	- This can use the same texture as the detector.
0) Write a method for raycasting LEFT to RIGHT, dump to an array of float2(angle, distance).
0) Material will need to be in the render group 



=============================================

Any point (x,y) on the path of the circle is x = rsin(θ), y = rcos(θ).

thus: (x,y) = (12*sin(115), 12*cos(115))

So your point will roughly be (10.876, -5.071) (assuming the top right quadrant is x+, y+)


[IF THERE IS AN OFFSET (WORLD SPACE)]

x = cx + r * cos(a)
y = cy + r * sin(a)

Where r is the radius, cx,cy the origin, and a the angle.

That's pretty easy to adapt into any language with basic trig functions. Note that most languages will use radians for the angle in trig functions, so rather than cycling through 0..360 degrees, you're cycling through 0..2PI radians.
