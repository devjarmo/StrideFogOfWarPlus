
0) Move this all (Shader Logic) to the game side code and just update a single Alpha variable.
0) Write the unit alpha script-> attach to enemies through prefab.
0) Copy over the registration component of the fog of war script.
0) Copy over the system portion of the fog of war script.
0) Perform a simple test with the camera.
0) Measure/Optimize performance.
2) Create a circular model for field of view.
3) Write a method for raycasting LEFT to RIGHT, dump to an array of float2(angle, distance).
4) Pump the array of float2 to a shader and write a shader for field of view.
5) Material will need to be render group 31.



=============================================

Any point (x,y) on the path of the circle is x = rsin(θ), y = rcos(θ).

thus: (x,y) = (12*sin(115), 12*cos(115))

So your point will roughly be (10.876, -5.071) (assuming the top right quadrant is x+, y+)


[IF THERE IS AN OFFSET (WORLD SPACE)]

x = cx + r * cos(a)
y = cy + r * sin(a)

Where r is the radius, cx,cy the origin, and a the angle.

That's pretty easy to adapt into any language with basic trig functions. Note that most languages will use radians for the angle in trig functions, so rather than cycling through 0..360 degrees, you're cycling through 0..2PI radians.
